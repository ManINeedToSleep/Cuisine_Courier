// üìö Database Schema
// Here lies the structure of our digital recipe book

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users - The chefs of our kitchen
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique // No duplicate chefs allowed! üë®‚Äçüç≥
  password      String    // Safely encrypted, because sharing passwords is bad
  name          String
  createdAt     DateTime  @default(now()) // When they joined our cooking party
  updatedAt     DateTime  @updatedAt
  recipes       Recipe[]  @relation("UserRecipes")
  favorites     Recipe[]  @relation("UserFavorites")
  collections   Collection[] // Their recipe playlists, if you will üìë
}

// Recipes - The stars of the show! ‚≠ê
model Recipe {
  id            String        @id
  name          String
  thumbnail     String
  category      String
  area          String
  instructions  String
  createdBy     User?        @relation("UserRecipes", fields: [userId], references: [id])
  userId        Int?
  favoritedBy   User[]       @relation("UserFavorites")
  collections   Collection[]  @relation("RecipeCollections")
  categories    Category[] // For when you can't decide if it's dinner or breakfast
  favorites     Favorite[]
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  recipes     Recipe[]  @relation("RecipeCollections")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  recipes     Recipe[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Favorite {
  userId    String
  recipeId  String
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  createdAt DateTime  @default(now())

  @@id([userId, recipeId])
  @@index([userId])
}

// The rest of the models follow similar patterns...
// I won't comment them all because you get the idea
// And if you don't, well... that's what Stack Overflow is for! üòâ
